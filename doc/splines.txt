/* BEZIER CURVES:
https://www.youtube.com/watch?v=aVwxzDHniEw

lerp; linear interprelation p0 - p1.
Calculate distance of p0 to P in the middle which is called t

    -> P = lerp(p0, p1, t) -> (1-t)p0 + tP1

two lerps; sharing same t value. Connect line to both P points.
    
    -> This creates a Queadratic Bezier Curve when you increment through the t values

three lerps; same process connect untill one P point for one line.

    -> Most common to use and depends on 6 linear interprelation computations

This is called nested lerps.

=================================================================

                DeCastelJau:

Square p0 - p1 - p2 - p3:
p0 - p1 P -> A = lerp(p0, p1, t)
p1 - p2 P -> B = Lerp(p1, p2, t)
p2 - p3 P -> C = Lerp(p2, p3, t)
A  - B  P -> D = Lerp(A , B,  t)
B  - C  P -> E = Lerp(B , C,  t)
D  - E  P -> P = Lerp(D , E,  t)

    -> This depends on each new function using variables 
    each calculated by their own linear interprelation formula

Different way of odoing this is the following:

                DeCastelJau:

A = (1-t)p0 + tp1
B = (1-t)p1 + tp2
C = (1-t)p2 + tp3

D = (1-t)A + tB
E = (1-t)B + tC

P = (1-t)D + tE

EXPAND: Bernstein Polynomial Form: 

    P(t) = -P0t^{3}+3P0t^{2}-3P0t+P0+3P1t^{3}-6P1t^{2}+3P1t-3P2t^{3}+3P2t^{2}+p3t^{3}

Re-organized / re-visualized: (visualized as a vector) Bernstein Polynomial Form:

                derivatives of: Bernstein Polynomial form

    P(t) =
        P0(  -t^3 + 3t^2 - 3t + 1 ) +
        P1(  3t^3 - 6t^2 + 3t     ) +
        P2( -3t^3 + 3t^2          ) +
        P3(   t^3                 )

    -> This is called a weighted sum because they trade weights where each vector adds up to one.
    It's a reinterpretation of the nested linear interprelation method.

    -> offset points can be calculated because the derivative is tangent to the curve

Derivatives:

    1st derivative can be seen as the velocity. EXAMPLE:

        p'(t) =
        P0( -3t^2 + 6t - 3 ) +
        P1(  9t^2 - 12t + 3) +
        P2( -9t^2 + 6t     ) +
        P3(  3t^2          )

    2nd derivative can be seen as the acceleration. EXAMPLE:

        P''(t) =
        P0( - 6t + 6 ) +
        P1(  18t - 12) +
        P2( -18t + 6 ) +
        P3(   6t     )

    3rd derivative can be seen as the Jerk, or jolt. Delta Acc. EXAMPLE:

        P'''(t) =
        P0(- 6) +
        P1( 18) +
        P2(-18) +
        P3( 6 )

    But instead use this. EXAMPLE: K for curvature

        K = det(P', P'') / ||P'||^3 
        -> This can be used to calculate the Bounding box of the bezia curve

        The best way to calulate the Bounding box is 
        to calulate the tangent of the three top lines 
        creating vectors using a re-organized formula of the first derivative.

        Bounding box: can be used to calculate wether something has entered a box
        even if the length, shape, or form has been changed.

        P'(t) =
        t^2(-3P0 + 9P1 - 9P2 + 3P3) + () = A
        t  ( 6P0 - 12P1+ 6P2      ) + () = B
            -3P0 + 3P1                () = C

            get 't value' from quadratic formula, find t like you find x
            _-> NOTE: if values not between 0 and 1. Then the should not be used

            _->Length of cubic bezia curve calulated with eliptic integral

            _-> Arc Length is for later.

There is more ways of calculating splines but this is a popular way
NEXT VIDEO:
https://www.youtube.com/watch?v=jvPPXbo87ds&t=361s

Cubic bezier spline

    This calculates with the earlier established cubic bezier curve using linear interpolation.
    The first is calculated and immediately handed of to the next unit.
    A string of cubic bezier curves creating a spline.

        _->input 't' value for one curve and 'u' value as input 'perameter space' for entire spline.
        _->points defined are control points
        _->Curve generated by control points
        _->Joins/knots are where each curve calculated is met and handed off.
        _->Each curve has a knot value and is assentially a knot interval, making up perameter space.

*/
